// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: taskbounty/task/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3836386d3dfdf39f, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3836386d3dfdf39f, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryGetTaskRequest defines the QueryGetTaskRequest message.
type QueryGetTaskRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetTaskRequest) Reset()         { *m = QueryGetTaskRequest{} }
func (m *QueryGetTaskRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTaskRequest) ProtoMessage()    {}
func (*QueryGetTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3836386d3dfdf39f, []int{2}
}
func (m *QueryGetTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTaskRequest.Merge(m, src)
}
func (m *QueryGetTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTaskRequest proto.InternalMessageInfo

func (m *QueryGetTaskRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// QueryGetTaskResponse defines the QueryGetTaskResponse message.
type QueryGetTaskResponse struct {
	Task Task `protobuf:"bytes,1,opt,name=task,proto3" json:"task"`
}

func (m *QueryGetTaskResponse) Reset()         { *m = QueryGetTaskResponse{} }
func (m *QueryGetTaskResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTaskResponse) ProtoMessage()    {}
func (*QueryGetTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3836386d3dfdf39f, []int{3}
}
func (m *QueryGetTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTaskResponse.Merge(m, src)
}
func (m *QueryGetTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTaskResponse proto.InternalMessageInfo

func (m *QueryGetTaskResponse) GetTask() Task {
	if m != nil {
		return m.Task
	}
	return Task{}
}

// QueryAllTaskRequest defines the QueryAllTaskRequest message.
type QueryAllTaskRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTaskRequest) Reset()         { *m = QueryAllTaskRequest{} }
func (m *QueryAllTaskRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTaskRequest) ProtoMessage()    {}
func (*QueryAllTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3836386d3dfdf39f, []int{4}
}
func (m *QueryAllTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTaskRequest.Merge(m, src)
}
func (m *QueryAllTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTaskRequest proto.InternalMessageInfo

func (m *QueryAllTaskRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllTaskResponse defines the QueryAllTaskResponse message.
type QueryAllTaskResponse struct {
	Task       []Task              `protobuf:"bytes,1,rep,name=task,proto3" json:"task"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTaskResponse) Reset()         { *m = QueryAllTaskResponse{} }
func (m *QueryAllTaskResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllTaskResponse) ProtoMessage()    {}
func (*QueryAllTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3836386d3dfdf39f, []int{5}
}
func (m *QueryAllTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTaskResponse.Merge(m, src)
}
func (m *QueryAllTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTaskResponse proto.InternalMessageInfo

func (m *QueryAllTaskResponse) GetTask() []Task {
	if m != nil {
		return m.Task
	}
	return nil
}

func (m *QueryAllTaskResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetTaskRewardRequest defines the QueryGetTaskRewardRequest message.
type QueryGetTaskRewardRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetTaskRewardRequest) Reset()         { *m = QueryGetTaskRewardRequest{} }
func (m *QueryGetTaskRewardRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTaskRewardRequest) ProtoMessage()    {}
func (*QueryGetTaskRewardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3836386d3dfdf39f, []int{6}
}
func (m *QueryGetTaskRewardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTaskRewardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTaskRewardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTaskRewardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTaskRewardRequest.Merge(m, src)
}
func (m *QueryGetTaskRewardRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTaskRewardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTaskRewardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTaskRewardRequest proto.InternalMessageInfo

func (m *QueryGetTaskRewardRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// QueryGetTaskRewardResponse defines the QueryGetTaskRewardResponse message.
type QueryGetTaskRewardResponse struct {
	TaskReward TaskReward `protobuf:"bytes,1,opt,name=task_reward,json=taskReward,proto3" json:"task_reward"`
}

func (m *QueryGetTaskRewardResponse) Reset()         { *m = QueryGetTaskRewardResponse{} }
func (m *QueryGetTaskRewardResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTaskRewardResponse) ProtoMessage()    {}
func (*QueryGetTaskRewardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3836386d3dfdf39f, []int{7}
}
func (m *QueryGetTaskRewardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTaskRewardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTaskRewardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTaskRewardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTaskRewardResponse.Merge(m, src)
}
func (m *QueryGetTaskRewardResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTaskRewardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTaskRewardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTaskRewardResponse proto.InternalMessageInfo

func (m *QueryGetTaskRewardResponse) GetTaskReward() TaskReward {
	if m != nil {
		return m.TaskReward
	}
	return TaskReward{}
}

// QueryAllTaskRewardRequest defines the QueryAllTaskRewardRequest message.
type QueryAllTaskRewardRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTaskRewardRequest) Reset()         { *m = QueryAllTaskRewardRequest{} }
func (m *QueryAllTaskRewardRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTaskRewardRequest) ProtoMessage()    {}
func (*QueryAllTaskRewardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3836386d3dfdf39f, []int{8}
}
func (m *QueryAllTaskRewardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTaskRewardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTaskRewardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTaskRewardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTaskRewardRequest.Merge(m, src)
}
func (m *QueryAllTaskRewardRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTaskRewardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTaskRewardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTaskRewardRequest proto.InternalMessageInfo

func (m *QueryAllTaskRewardRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllTaskRewardResponse defines the QueryAllTaskRewardResponse message.
type QueryAllTaskRewardResponse struct {
	TaskReward []TaskReward        `protobuf:"bytes,1,rep,name=task_reward,json=taskReward,proto3" json:"task_reward"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTaskRewardResponse) Reset()         { *m = QueryAllTaskRewardResponse{} }
func (m *QueryAllTaskRewardResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllTaskRewardResponse) ProtoMessage()    {}
func (*QueryAllTaskRewardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3836386d3dfdf39f, []int{9}
}
func (m *QueryAllTaskRewardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTaskRewardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTaskRewardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTaskRewardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTaskRewardResponse.Merge(m, src)
}
func (m *QueryAllTaskRewardResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTaskRewardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTaskRewardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTaskRewardResponse proto.InternalMessageInfo

func (m *QueryAllTaskRewardResponse) GetTaskReward() []TaskReward {
	if m != nil {
		return m.TaskReward
	}
	return nil
}

func (m *QueryAllTaskRewardResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetTaskRewardsByClaimantRequest defines the QueryGetTaskRewardsByClaimantRequest message.
type QueryGetTaskRewardsByClaimantRequest struct {
	Claimant string `protobuf:"bytes,1,opt,name=claimant,proto3" json:"claimant,omitempty"`
}

func (m *QueryGetTaskRewardsByClaimantRequest) Reset()         { *m = QueryGetTaskRewardsByClaimantRequest{} }
func (m *QueryGetTaskRewardsByClaimantRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTaskRewardsByClaimantRequest) ProtoMessage()    {}
func (*QueryGetTaskRewardsByClaimantRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3836386d3dfdf39f, []int{10}
}
func (m *QueryGetTaskRewardsByClaimantRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTaskRewardsByClaimantRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTaskRewardsByClaimantRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTaskRewardsByClaimantRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTaskRewardsByClaimantRequest.Merge(m, src)
}
func (m *QueryGetTaskRewardsByClaimantRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTaskRewardsByClaimantRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTaskRewardsByClaimantRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTaskRewardsByClaimantRequest proto.InternalMessageInfo

func (m *QueryGetTaskRewardsByClaimantRequest) GetClaimant() string {
	if m != nil {
		return m.Claimant
	}
	return ""
}

// QueryGetTaskRewardsByClaimantResponse defines the QueryGetTaskRewardsByClaimantResponse message.
type QueryGetTaskRewardsByClaimantResponse struct {
	TaskRewards []TaskReward `protobuf:"bytes,1,rep,name=task_rewards,json=taskRewards,proto3" json:"task_rewards"`
}

func (m *QueryGetTaskRewardsByClaimantResponse) Reset()         { *m = QueryGetTaskRewardsByClaimantResponse{} }
func (m *QueryGetTaskRewardsByClaimantResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTaskRewardsByClaimantResponse) ProtoMessage()    {}
func (*QueryGetTaskRewardsByClaimantResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3836386d3dfdf39f, []int{11}
}
func (m *QueryGetTaskRewardsByClaimantResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTaskRewardsByClaimantResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTaskRewardsByClaimantResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTaskRewardsByClaimantResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTaskRewardsByClaimantResponse.Merge(m, src)
}
func (m *QueryGetTaskRewardsByClaimantResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTaskRewardsByClaimantResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTaskRewardsByClaimantResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTaskRewardsByClaimantResponse proto.InternalMessageInfo

func (m *QueryGetTaskRewardsByClaimantResponse) GetTaskRewards() []TaskReward {
	if m != nil {
		return m.TaskRewards
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "taskbounty.task.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "taskbounty.task.v1.QueryParamsResponse")
	proto.RegisterType((*QueryGetTaskRequest)(nil), "taskbounty.task.v1.QueryGetTaskRequest")
	proto.RegisterType((*QueryGetTaskResponse)(nil), "taskbounty.task.v1.QueryGetTaskResponse")
	proto.RegisterType((*QueryAllTaskRequest)(nil), "taskbounty.task.v1.QueryAllTaskRequest")
	proto.RegisterType((*QueryAllTaskResponse)(nil), "taskbounty.task.v1.QueryAllTaskResponse")
	proto.RegisterType((*QueryGetTaskRewardRequest)(nil), "taskbounty.task.v1.QueryGetTaskRewardRequest")
	proto.RegisterType((*QueryGetTaskRewardResponse)(nil), "taskbounty.task.v1.QueryGetTaskRewardResponse")
	proto.RegisterType((*QueryAllTaskRewardRequest)(nil), "taskbounty.task.v1.QueryAllTaskRewardRequest")
	proto.RegisterType((*QueryAllTaskRewardResponse)(nil), "taskbounty.task.v1.QueryAllTaskRewardResponse")
	proto.RegisterType((*QueryGetTaskRewardsByClaimantRequest)(nil), "taskbounty.task.v1.QueryGetTaskRewardsByClaimantRequest")
	proto.RegisterType((*QueryGetTaskRewardsByClaimantResponse)(nil), "taskbounty.task.v1.QueryGetTaskRewardsByClaimantResponse")
}

func init() { proto.RegisterFile("taskbounty/task/v1/query.proto", fileDescriptor_3836386d3dfdf39f) }

var fileDescriptor_3836386d3dfdf39f = []byte{
	// 697 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0x4f, 0x4f, 0x13, 0x4f,
	0x18, 0xc7, 0xbb, 0x85, 0x1f, 0x7f, 0x1e, 0x7e, 0x92, 0x38, 0x92, 0x58, 0x37, 0xb0, 0xc5, 0x09,
	0xff, 0x02, 0xb2, 0x93, 0xc2, 0x45, 0x0f, 0x1e, 0xac, 0x51, 0x12, 0xe3, 0x01, 0x1b, 0x4e, 0x26,
	0xc6, 0x4c, 0xdb, 0x4d, 0xb3, 0xa1, 0xdd, 0x59, 0x3a, 0x0b, 0xda, 0x10, 0x62, 0xa2, 0x77, 0x63,
	0xc2, 0xc5, 0x83, 0x2f, 0xc0, 0x83, 0x07, 0x5f, 0x84, 0x07, 0x8e, 0x24, 0x5e, 0x3c, 0x19, 0x03,
	0x26, 0xbe, 0x0d, 0xb3, 0x33, 0x4f, 0xcb, 0x2e, 0xdd, 0x65, 0x2b, 0xe1, 0x42, 0x86, 0xd9, 0xe7,
	0xcf, 0xe7, 0xfb, 0x7d, 0x98, 0x07, 0xb0, 0x02, 0x2e, 0xb7, 0xab, 0x62, 0xd7, 0x0b, 0x3a, 0x2c,
	0x3c, 0xb2, 0xbd, 0x12, 0xdb, 0xd9, 0x75, 0xda, 0x1d, 0xdb, 0x6f, 0x8b, 0x40, 0x10, 0x72, 0xf6,
	0xdd, 0x0e, 0x8f, 0xf6, 0x5e, 0xc9, 0xbc, 0xce, 0x5b, 0xae, 0x27, 0x98, 0xfa, 0xa9, 0xc3, 0xcc,
	0xe5, 0x9a, 0x90, 0x2d, 0x21, 0x59, 0x95, 0x4b, 0x47, 0xe7, 0xb3, 0xbd, 0x52, 0xd5, 0x09, 0x78,
	0x89, 0xf9, 0xbc, 0xe1, 0x7a, 0x3c, 0x70, 0x85, 0x87, 0xb1, 0x53, 0x0d, 0xd1, 0x10, 0xea, 0xc8,
	0xc2, 0x13, 0xde, 0x4e, 0x37, 0x84, 0x68, 0x34, 0x1d, 0xc6, 0x7d, 0x97, 0x71, 0xcf, 0x13, 0x81,
	0x4a, 0x91, 0xf8, 0xb5, 0x98, 0x80, 0xe9, 0xf3, 0x36, 0x6f, 0x75, 0x03, 0x66, 0x12, 0x02, 0x14,
	0xaf, 0xfa, 0x4c, 0xa7, 0x80, 0x3c, 0x0b, 0xa9, 0x36, 0x55, 0x4e, 0xc5, 0xd9, 0xd9, 0x75, 0x64,
	0x40, 0xb7, 0xe0, 0x46, 0xec, 0x56, 0xfa, 0xc2, 0x93, 0x0e, 0xb9, 0x0f, 0x23, 0xba, 0x76, 0xc1,
	0x98, 0x35, 0x96, 0x26, 0xd6, 0x4c, 0xbb, 0xdf, 0x04, 0x5b, 0xe7, 0x94, 0xc7, 0x8f, 0x7e, 0x16,
	0x73, 0x9f, 0xff, 0x7c, 0x5d, 0x36, 0x2a, 0x98, 0x44, 0xe7, 0xb1, 0xea, 0x86, 0x13, 0x6c, 0x71,
	0xb9, 0x8d, 0xcd, 0xc8, 0x24, 0xe4, 0xdd, 0xba, 0xaa, 0x38, 0x5c, 0xc9, 0xbb, 0x75, 0xfa, 0x04,
	0xa6, 0xe2, 0x61, 0xd8, 0x7d, 0x0d, 0x86, 0xc3, 0x1e, 0xd8, 0xbb, 0x90, 0xd4, 0x3b, 0x8c, 0x2f,
	0x0f, 0x87, 0x9d, 0x2b, 0x2a, 0x96, 0xbe, 0xc0, 0x96, 0x0f, 0x9a, 0xcd, 0x68, 0xcb, 0xc7, 0x00,
	0x67, 0xee, 0x63, 0xc1, 0x05, 0x5b, 0x8f, 0xca, 0x0e, 0x47, 0x65, 0xeb, 0x51, 0xe3, 0xa8, 0xec,
	0x4d, 0xde, 0x70, 0x30, 0xb7, 0x12, 0xc9, 0xa4, 0x87, 0x06, 0xb2, 0xf6, 0xea, 0xf7, 0xb1, 0x0e,
	0x0d, 0xca, 0x4a, 0x36, 0x62, 0x50, 0x79, 0x05, 0xb5, 0x98, 0x09, 0xa5, 0x1b, 0xc6, 0xa8, 0x56,
	0xe0, 0x56, 0xdc, 0xc0, 0x57, 0xbc, 0x5d, 0x4f, 0x73, 0xbb, 0x06, 0x66, 0x52, 0x30, 0xea, 0x78,
	0x04, 0x13, 0x21, 0xdb, 0xcb, 0xb6, 0xba, 0x46, 0xa7, 0xac, 0x34, 0x39, 0x3a, 0x19, 0x45, 0x41,
	0xd0, 0xbb, 0xa1, 0x35, 0x24, 0xea, 0xd9, 0x14, 0x25, 0xba, 0xaa, 0x61, 0x7c, 0x31, 0x50, 0xca,
	0xb9, 0x2e, 0x69, 0x52, 0x86, 0x2e, 0x23, 0xe5, 0xea, 0xa6, 0x54, 0x86, 0xb9, 0x7e, 0xe3, 0x65,
	0xb9, 0xf3, 0xb0, 0xc9, 0xdd, 0x16, 0xf7, 0x82, 0xae, 0x3d, 0x26, 0x8c, 0xd5, 0xf0, 0x4a, 0x99,
	0x33, 0x5e, 0xe9, 0xfd, 0x4e, 0x7d, 0x98, 0xcf, 0xa8, 0x81, 0xe2, 0x37, 0xe0, 0xff, 0x88, 0x78,
	0xf9, 0x4f, 0xea, 0x27, 0xce, 0xd4, 0xcb, 0xb5, 0xf7, 0xa3, 0xf0, 0x9f, 0x6a, 0x49, 0x0e, 0x60,
	0x44, 0x3f, 0x75, 0xb2, 0x90, 0x54, 0xa6, 0x7f, 0xab, 0x98, 0x8b, 0x99, 0x71, 0x9a, 0x96, 0xd2,
	0xb7, 0xdf, 0x7f, 0x1f, 0xe6, 0xa7, 0x89, 0xc9, 0x52, 0xb7, 0x1b, 0x79, 0x67, 0xc0, 0x28, 0xca,
	0x26, 0xe9, 0x85, 0xe3, 0xab, 0xc6, 0x5c, 0xca, 0x0e, 0x44, 0x84, 0x79, 0x85, 0x50, 0x24, 0x33,
	0x2c, 0x65, 0x7f, 0xb2, 0x7d, 0xb7, 0x7e, 0x40, 0xde, 0xc0, 0xd8, 0x53, 0x57, 0x66, 0x51, 0xc4,
	0xb7, 0xcf, 0x05, 0x14, 0xe7, 0xd6, 0x08, 0x9d, 0x55, 0x14, 0x26, 0x29, 0xa4, 0x51, 0x90, 0x4f,
	0x06, 0x5c, 0x8b, 0x4d, 0x9f, 0xac, 0x66, 0x6b, 0x8c, 0xbc, 0x3e, 0xd3, 0x1e, 0x34, 0x1c, 0x91,
	0xee, 0x28, 0xa4, 0x05, 0x32, 0x97, 0x86, 0x84, 0x7f, 0x63, 0xda, 0x9f, 0x8f, 0x06, 0x4c, 0x76,
	0x0d, 0xca, 0xe4, 0x4b, 0xda, 0x0e, 0x17, 0xf0, 0x25, 0x3e, 0x73, 0xba, 0xa8, 0xf8, 0x6e, 0x93,
	0x62, 0x06, 0x1f, 0xf9, 0x66, 0x40, 0x21, 0xed, 0xdd, 0x90, 0xbb, 0x83, 0xb9, 0xd2, 0xff, 0x5c,
	0xcd, 0x7b, 0x97, 0xc8, 0x44, 0xf4, 0x75, 0x85, 0xbe, 0x4a, 0x56, 0x32, 0xd0, 0x25, 0xdb, 0xef,
	0x6e, 0x80, 0x83, 0x72, 0xe9, 0xe8, 0xc4, 0x32, 0x8e, 0x4f, 0x2c, 0xe3, 0xd7, 0x89, 0x65, 0x7c,
	0x38, 0xb5, 0x72, 0xc7, 0xa7, 0x56, 0xee, 0xc7, 0xa9, 0x95, 0x7b, 0x7e, 0x33, 0x52, 0xe5, 0xb5,
	0xae, 0x13, 0x74, 0x7c, 0x47, 0x56, 0x47, 0xd4, 0xbf, 0xfe, 0xf5, 0xbf, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x76, 0xce, 0xa5, 0x2c, 0xe3, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// ListTask Queries a list of Task items.
	GetTask(ctx context.Context, in *QueryGetTaskRequest, opts ...grpc.CallOption) (*QueryGetTaskResponse, error)
	// ListTask defines the ListTask RPC.
	ListTask(ctx context.Context, in *QueryAllTaskRequest, opts ...grpc.CallOption) (*QueryAllTaskResponse, error)
	// Queries list of TaskReward items
	GetTaskReward(ctx context.Context, in *QueryGetTaskRewardRequest, opts ...grpc.CallOption) (*QueryGetTaskRewardResponse, error)
	// Queries TaskReward
	ListTaskReward(ctx context.Context, in *QueryAllTaskRewardRequest, opts ...grpc.CallOption) (*QueryAllTaskRewardResponse, error)
	// Queries TaskReward items by claimant
	GetTaskRewardsByClaimant(ctx context.Context, in *QueryGetTaskRewardsByClaimantRequest, opts ...grpc.CallOption) (*QueryGetTaskRewardsByClaimantResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/taskbounty.task.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTask(ctx context.Context, in *QueryGetTaskRequest, opts ...grpc.CallOption) (*QueryGetTaskResponse, error) {
	out := new(QueryGetTaskResponse)
	err := c.cc.Invoke(ctx, "/taskbounty.task.v1.Query/GetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListTask(ctx context.Context, in *QueryAllTaskRequest, opts ...grpc.CallOption) (*QueryAllTaskResponse, error) {
	out := new(QueryAllTaskResponse)
	err := c.cc.Invoke(ctx, "/taskbounty.task.v1.Query/ListTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTaskReward(ctx context.Context, in *QueryGetTaskRewardRequest, opts ...grpc.CallOption) (*QueryGetTaskRewardResponse, error) {
	out := new(QueryGetTaskRewardResponse)
	err := c.cc.Invoke(ctx, "/taskbounty.task.v1.Query/GetTaskReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListTaskReward(ctx context.Context, in *QueryAllTaskRewardRequest, opts ...grpc.CallOption) (*QueryAllTaskRewardResponse, error) {
	out := new(QueryAllTaskRewardResponse)
	err := c.cc.Invoke(ctx, "/taskbounty.task.v1.Query/ListTaskReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTaskRewardsByClaimant(ctx context.Context, in *QueryGetTaskRewardsByClaimantRequest, opts ...grpc.CallOption) (*QueryGetTaskRewardsByClaimantResponse, error) {
	out := new(QueryGetTaskRewardsByClaimantResponse)
	err := c.cc.Invoke(ctx, "/taskbounty.task.v1.Query/GetTaskRewardsByClaimant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// ListTask Queries a list of Task items.
	GetTask(context.Context, *QueryGetTaskRequest) (*QueryGetTaskResponse, error)
	// ListTask defines the ListTask RPC.
	ListTask(context.Context, *QueryAllTaskRequest) (*QueryAllTaskResponse, error)
	// Queries list of TaskReward items
	GetTaskReward(context.Context, *QueryGetTaskRewardRequest) (*QueryGetTaskRewardResponse, error)
	// Queries TaskReward
	ListTaskReward(context.Context, *QueryAllTaskRewardRequest) (*QueryAllTaskRewardResponse, error)
	// Queries TaskReward items by claimant
	GetTaskRewardsByClaimant(context.Context, *QueryGetTaskRewardsByClaimantRequest) (*QueryGetTaskRewardsByClaimantResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) GetTask(ctx context.Context, req *QueryGetTaskRequest) (*QueryGetTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (*UnimplementedQueryServer) ListTask(ctx context.Context, req *QueryAllTaskRequest) (*QueryAllTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTask not implemented")
}
func (*UnimplementedQueryServer) GetTaskReward(ctx context.Context, req *QueryGetTaskRewardRequest) (*QueryGetTaskRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskReward not implemented")
}
func (*UnimplementedQueryServer) ListTaskReward(ctx context.Context, req *QueryAllTaskRewardRequest) (*QueryAllTaskRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTaskReward not implemented")
}
func (*UnimplementedQueryServer) GetTaskRewardsByClaimant(ctx context.Context, req *QueryGetTaskRewardsByClaimantRequest) (*QueryGetTaskRewardsByClaimantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskRewardsByClaimant not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taskbounty.task.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taskbounty.task.v1.Query/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTask(ctx, req.(*QueryGetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taskbounty.task.v1.Query/ListTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListTask(ctx, req.(*QueryAllTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTaskReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTaskRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTaskReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taskbounty.task.v1.Query/GetTaskReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTaskReward(ctx, req.(*QueryGetTaskRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListTaskReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTaskRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListTaskReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taskbounty.task.v1.Query/ListTaskReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListTaskReward(ctx, req.(*QueryAllTaskRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTaskRewardsByClaimant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTaskRewardsByClaimantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTaskRewardsByClaimant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taskbounty.task.v1.Query/GetTaskRewardsByClaimant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTaskRewardsByClaimant(ctx, req.(*QueryGetTaskRewardsByClaimantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "taskbounty.task.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _Query_GetTask_Handler,
		},
		{
			MethodName: "ListTask",
			Handler:    _Query_ListTask_Handler,
		},
		{
			MethodName: "GetTaskReward",
			Handler:    _Query_GetTaskReward_Handler,
		},
		{
			MethodName: "ListTaskReward",
			Handler:    _Query_ListTaskReward_Handler,
		},
		{
			MethodName: "GetTaskRewardsByClaimant",
			Handler:    _Query_GetTaskRewardsByClaimant_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "taskbounty/task/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Task.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Task) > 0 {
		for iNdEx := len(m.Task) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Task[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTaskRewardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTaskRewardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTaskRewardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTaskRewardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTaskRewardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTaskRewardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TaskReward.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllTaskRewardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTaskRewardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTaskRewardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTaskRewardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTaskRewardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTaskRewardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskReward) > 0 {
		for iNdEx := len(m.TaskReward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TaskReward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTaskRewardsByClaimantRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTaskRewardsByClaimantRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTaskRewardsByClaimantRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Claimant) > 0 {
		i -= len(m.Claimant)
		copy(dAtA[i:], m.Claimant)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Claimant)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTaskRewardsByClaimantResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTaskRewardsByClaimantResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTaskRewardsByClaimantResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TaskRewards) > 0 {
		for iNdEx := len(m.TaskRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TaskRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Task.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Task) > 0 {
		for _, e := range m.Task {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTaskRewardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetTaskRewardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TaskReward.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllTaskRewardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTaskRewardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TaskReward) > 0 {
		for _, e := range m.TaskReward {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTaskRewardsByClaimantRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Claimant)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTaskRewardsByClaimantResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TaskRewards) > 0 {
		for _, e := range m.TaskRewards {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Task.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Task = append(m.Task, Task{})
			if err := m.Task[len(m.Task)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTaskRewardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTaskRewardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTaskRewardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTaskRewardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTaskRewardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTaskRewardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TaskReward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTaskRewardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTaskRewardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTaskRewardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTaskRewardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTaskRewardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTaskRewardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskReward = append(m.TaskReward, TaskReward{})
			if err := m.TaskReward[len(m.TaskReward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTaskRewardsByClaimantRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTaskRewardsByClaimantRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTaskRewardsByClaimantRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claimant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Claimant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTaskRewardsByClaimantResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTaskRewardsByClaimantResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTaskRewardsByClaimantResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskRewards = append(m.TaskRewards, TaskReward{})
			if err := m.TaskRewards[len(m.TaskRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
